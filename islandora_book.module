<?php

/**
 * @file
 * Defines all the hooks this module implements.
 */

use Drupal\Core\Url;

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function islandora_book_theme() {
  return [
    'islandora_book_book' => [
      'variables' => ['object' => NULL],
      'file' => 'theme/theme.inc',
    ],
    'islandora_book_page' => [
      'variables' => ['object' => NULL],
      'file' => 'theme/theme.inc',
    ],
    'islandora_book_page_img_print' => [
      'variables' => ['islandora_content' => NULL],
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_form_associations().
 */
function islandora_book_xml_form_builder_form_associations() {
  return [
    'islandora_book_mods_form' => [
      'self_transform' => 'islandora_cleanup_mods_extended.xsl',
      'content_model' => 'islandora:bookCModel',
      'form_name' => 'Islandora Book MODS Form',
      'dsid' => 'MODS',
      'title_field' => ['titleInfo', 'title'],
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ],
  ];
}

/**
 * Implements hook_xml_form_builder_forms().
 */
function islandora_book_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_book');
  return ['Islandora Book MODS Form' => ['form_file' => "$module_path/data/forms/book_form_mods.xml"]];
}

/**
 * Implements hook_islandora_required_objects().
 */
function islandora_book_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_book');
  $datastreams_path = "$module_path/data/datastreams";
  // Page Content Model.
  $page_content_model = $connection->repository->constructObject('islandora:pageCModel');
  $page_content_model->owner = 'fedoraAdmin';
  $page_content_model->label = 'Islandora Page Content Model';
  $page_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $page_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $paged_content_path = drupal_get_path('module', 'islandora_paged_content');
  $datastream->setContentFromFile("$paged_content_path/xml/islandora_pageCModel_ds_composite_model.xml", FALSE);
  $page_content_model->ingestDatastream($datastream);
  // Book Content Model.
  $book_content_model = $connection->repository->constructObject('islandora:bookCModel');
  $book_content_model->owner = 'fedoraAdmin';
  $book_content_model->label = 'Islandora Internet Archive Book Content Model';
  $book_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $book_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'M');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_bookCModel_ds_composite_model.xml", FALSE);
  $book_content_model->ingestDatastream($datastream);
  // Book Collection.
  $book_collection = $connection->repository->constructObject('islandora:bookCollection');
  $book_collection->owner = 'fedoraAdmin';
  $book_collection->label = 'Book Collection';
  $book_collection->models = 'islandora:collectionCModel';
  $book_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $book_collection->constructDatastream('COLLECTION_POLICY', 'M');
  $datastream->label = 'COLLECTION_POLICY';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$datastreams_path/islandora_book_collection_policy.xml", FALSE);
  $book_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $book_collection->constructDatastream('TN', 'M');
  $datastream->label = 'TN';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $book_collection->ingestDatastream($datastream);
  return [
    'islandora_book' => [
      'title' => 'Islandora book',
      'objects' => [
        $page_content_model,
        $book_content_model,
        $book_collection,
      ],
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_bookcmodel_islandora_view_object($object) {
  return [
    'islandora_book' => [
      '#theme' => 'islandora_book_book',
      '#object' => $object,
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_book_islandora_pagecmodel_islandora_view_object($object, $page_number, $page_size) {
  return [
    'islandora_book' => [
      '#theme' => 'islandora_book_page',
      '#object' => $object,
    ],
  ];
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_book_islandora_pagecmodel_islandora_ingest_steps(FormStateInterface $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['book'])) {
    return;
  }
  return [
    'islandora_book_upload_pages' => [
      'weight' => 10,
      'type' => 'form',
      'form_class' => 'Drupal\islandora_paged_content\Form\UploadPage',
      'args' => [$shared_storage['book']],
    ],
  ];
}

/**
 * Implements hook_CMODEL_PID_islandora_ingest_steps().
 */
function islandora_book_islandora_bookcmodel_islandora_ingest_steps(FormStateInterface $form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  if (islandora_paged_content_can_extract_from_pdf()) {
    return [
      'islandora_book_upload_pdf' => [
        'weight' => 10,
        'type' => 'form',
        'form_class' => 'Drupal\islandora_paged_content\Form\UploadPdf',
        'args' => ['islandora:pageCModel'],
      ],
    ];
  }
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_book_islandora_bookcmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_paged_object_derivatives('islandora_book');
}

/**
 * Implements hook_islandora_derivative().
 */
function islandora_book_islandora_pagecmodel_islandora_derivative() {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  return islandora_paged_content_page_derivatives('islandora_book');
}

/**
 * Implements hook_form_islandora_object_properties_form_alter().
 */
function islandora_book_form_islandora_object_properties_form_alter(array &$form, FormStateInterface $form_state) {
  $object = $form_state->get('object');
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['delete']['#value'] = t('Delete Book');
  }
}

/**
 * Implements hook_form_islandora_delete_object_form_alter().
 */
function islandora_book_form_islandora_delete_object_form_alter(array &$form, FormStateInterface $form_state) {
  $object = $form_state->get('object');
  if (in_array('islandora:bookCModel', $object->models)) {
    $form['description']['#markup'] = t('This will remove the book object and all related page objects. This action cannot be undone.');
    $form['#submit'][] = 'islandora_book_islandora_delete_object_form_delete_pages_submit';
    if (($key = array_search('::submitForm', $form['#submit'])) !== FALSE) {
      unset($form['#submit'][$key]);
    }
  }
}

/**
 * Delete all the page objects related to the book object being deleted.
 *
 * @param array $form
 *   The Drupal form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The Drupal form state.
 */
function islandora_book_islandora_delete_object_form_delete_pages_submit(array $form, FormStateInterface $form_state) {
  module_load_include('inc', 'islandora_paged_content', 'includes/batch');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/utilities');

  $object = $form_state->get('object');
  $get_pid = function ($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  $batch_delete = islandora_paged_content_delete_pages_batch($object, $pages);
  $batch_delete['operations'][] = ['islandora_paged_content_delete_parent_object_operation', [$object->id]];
  batch_set($batch_delete);
  $parents = islandora_get_parents_from_rels_ext($object);
  $parent = array_pop($parents);
  if ($parent) {
    $form_state->setRedirect('islandora.view_object', ['object' => $parent->id]);
  }
  else {
    $form_state->setRedirect('islandora.view_default_object');
  }
}

/**
 * Renders the Pages local menu task.
 *
 * @param AbstractObject $object
 *   The book object to fetch the pages from.
 *
 * @return string
 *   The HTML repersentation of the given books pages.
 */
function islandora_book_pages_menu(AbstractObject $object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $pages = islandora_paged_content_get_pages($object);
  return [
    '#theme' => 'islandora_objects',
    '#objects' => array_keys($pages),
  ];

}

/**
 * Implements hook_islandora_update_related_objects_properties().
 */
function islandora_book_islandora_bookcmodel_islandora_update_related_objects_properties($object) {
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');
  $get_pid = function ($o) {
    return $o['pid'];
  };
  $pages = array_values(array_map($get_pid, islandora_paged_content_get_pages($object)));
  return $pages;
}

/**
 * Implements hook_islandora_xacml_editor_child_query().
 */
function islandora_book_islandora_bookcmodel_islandora_xacml_editor_child_query(AbstractObject $object) {
  $pages_query = <<<EOQ
SELECT ?object from <#ri> WHERE
{
  ?object <fedora-rels-ext:isMemberOf> <info:fedora/{$object->id}>
}
EOQ;
  return [
    'book_pages' => [
      'type' => 'sparql',
      'query' => $pages_query,
      'description' => t('All pages of this book (existing and new).'),
      'recurse' => TRUE,
    ],
  ];
}

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_book_islandora_view_print_object($object) {
  if (in_array('islandora:pageCModel', $object->models)) {
    // Theme image separately.
    $image = [
      '#theme' => 'image',
      '#title' => $object->label,
      '#uri' => Url::fromRoute('islandora.view_datastream_view', ['object' => $object->id, 'datastream' => 'JPG'])->toString(),
    ];
    return [
      '#theme' => 'islandora_book_page_img_print',
      '#islandora_content' => Drupal::service('renderer')->render($image),
    ];
  }
}

/**
 * Implements hook_CMODEL_PID_DSID_islandora_datastream_ingested().
 */
function islandora_book_islandora_pagecmodel_techmd_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('module', 'islandora_fits');
  $techmd = $datastream->content;
  $xml = new SimpleXMLElement($techmd);
  $xml->registerXPathNamespace('fits', 'http://hul.harvard.edu/ois/xml/ns/fits/fits_output');
  $fits_metadata = islandora_fits_child_xpath($xml);
  $unit = isset($fits_metadata['Jhove']['Sampling Frequency Unit'][0]) ? $fits_metadata['Jhove']['Sampling Frequency Unit'][0] : 'ins.';
  $xcount = isset($fits_metadata['Jhove']['X Sampling Frequency'][0]) ? $fits_metadata['Jhove']['X Sampling Frequency'][0] : '600';
  $ycount = isset($fits_metadata['Jhove']['Y Sampling Frequency'][0]) ? $fits_metadata['Jhove']['Y Sampling Frequency'][0] : '600';
  if ($xcount < 600 || $ycount < 600) {
    $message = t("Ingested image has a sampling frequency of @x by @y per @unit For best results use images of at least 600 by 600 per in.",
        [
          '@x' => $xcount,
          '@y' => $ycount,
          '@unit' => $unit,
        ]);
    drupal_set_message($message, 'warning', FALSE);
  }
}

/**
 * Implements hook_islandora_paged_content_model_registry().
 */
function islandora_book_islandora_paged_content_content_model_registry() {
  return [
    'islandora:bookCModel' => [
      'parents' => [
        'islandora:collectionCModel' => 'isMemberOfCollection',
      ],
      'children' => [
        'islandora:pageCModel' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_islandora_solution_pack_child_relationships().
 */
function islandora_book_islandora_solution_pack_child_relationships($cmodels) {
  if ($cmodels === 'all' || in_array('islandora:bookCModel', $cmodels)) {
    return [
      'prefix' => ['PREFIX islandora: <http://islandora.ca/ontology/relsext#>'],
      'predicate' => ['<islandora:isPageOf>'],
    ];
  }
}

/**
 * Implements hook_help().
 */
function islandora_book_help($route) {
  switch ($route) {
    // Main help page for the module.
    case 'help.page.islandora_book':
      // About section.
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Islandora Book Solution Pack allows users to add and manage Book objects and their Page objects. There are various viewers that can be used for Books and Pages, and the desired viewer can be chosen at the <a href=":admin">Islandora Book Configuration Page</a> of your website. See the <a href=":wiki">Islandora Book Solution Pack wiki*</a> for more information.', [
        ':wiki' => 'https://wiki.duraspace.org/display/ISLANDORA/Book+Solution+Pack',
        ':admin' => Url::fromRoute('islandora_book.admin')->toString(),
      ]) .
      '</p>';
      // Uses section.
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dt>' . t('Ingest and Manage Books') . '</dt><dd>';
      $output .= t('The "Usage" section of the <a href=":wiki">Islandora Book Solution Pack wiki*</a> has information on creating and managing Book objects.', [
        ':wiki' => 'https://wiki.duraspace.org/display/ISLANDORA/Book+Solution+Pack',
      ]) .
      '</dd>';

      $output .= '</br></br><p>';
      $output .= t('*Links go to documentation for the Drupal 7 version of the module, as documentation for the Drupal 8 version of the module has not yet been written. There may be some small discrepencies; however, most key points remain useful.') .
      '</p>';
      return $output;
  }
}
